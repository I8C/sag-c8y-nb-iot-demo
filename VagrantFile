# -*- mode: ruby -*-
# vi: set ft=ruby :
#  
# Copyright 2019 i8c N.V. (www.i8c.be)
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

# Add required plugins to the required_plugins array of strings variable below:
# 1) vagrant-vbguest 
# The centos/7 box doesn't contain the VirtualBox Guest Additions.
# Use the vagrant-vbguest plugin to install them automatically.
# This functionality is required to automatically sync the /vagrant folder between host and guest.
#
# 2) vagrant-reload
# Automatically reload the box using the vagrant-reload plugin
# to enable automatic syncing of /vagrant folder and other stuff after provisioning.
required_plugins = %w( vagrant-vbguest vagrant-reload )
restart_manually = false

required_plugins.each do |plugin|
  if not Vagrant.has_plugin?(plugin)
    system "vagrant plugin install #{plugin}"
    restart_manually = true
  end
end

if restart_manually
  puts "Execute the vagrant utility again now that required plugins have been installed"
  exit
end


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.gui = true
    # Adapt the memory and CPU settings below to the specs of your laptop
    vb.memory = "8192"
    vb.cpus = "4"
	# Assign a unique name to your VM
    vb.name = "sag-c8y-nb-iot-demo"
    # Enable copy/paste from host to guest
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
  
    # Override the rsync type in the Vagrantfile of the centos/7 box
    config.vm.synced_folder ".", "/vagrant", type: "virtualbox"
  end


  
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  
  
  # Change timezone to Brussels
  config.vm.provision "timezone", privileged: true, type: "shell", inline: "timedatectl set-timezone Europe/Brussels"
  
  # Install GNOME desktop, also installs a lot of other utilities such as wget, firefox, packagekit, JDK 8,...
  config.vm.provision "desktop", privileged: true, type: "shell", inline: "echo 'installing desktop ...' && yum -y groupinstall 'GNOME Desktop' 'Graphical Administration Tools' && systemctl set-default graphical.target && systemctl start graphical.target && echo 'desktop installed!'"
  
  # Disable automatic updates, this may conflict with later yum installation commands
  config.vm.provision "autoupdate-off", privileged: true, type: "shell", inline: "echo 'disabling packagekit ...' && systemctl stop packagekit.service && systemctl mask packagekit.service && echo 'packagekit disabled!'"
  
  # Change keyboard to Belgian layout, remove/update if you use a different keyboard layout
  # The keyboard layout can also be selected upon first login in GNOME
  config.vm.provision "keyboard", privileged: true, type: "shell", inline: "localectl set-x11-keymap be"
  
  # Reload to enable the VirtualBox Guest Additions and keyboard change
  # Use vagrant reload, "shutdown -r" from the guest command line is not sufficient
  
  
  
  # Install development tools. Note that JDK 8 will be installed as one of the Maven dependencies
  config.vm.provision "devtools", privileged: true, type: "shell", inline: "yum install -y git maven"
  
  # Install arduino IDE
  config.vm.provision "arduinoInstaller", privileged: false, type: "shell", path: "install/developmentDesktop/installArduinoInstaller.sh"
  
  # Install Eclipse installer
  config.vm.provision "eclipseInstaller", privileged: false, type: "shell", path: "install/developmentDesktop/installEclipseInstaller.sh"
  
  # disable the jre that is installed with SOAP-UI, it's an outdated 1.7 version that can cause SSL handshake failures.
  config.vm.provision "soapui", privileged: false, type: "shell", inline:  "echo 'installing SoapUI...' && wget https://s3.amazonaws.com/downloads.eviware/soapuios/5.4.0/SoapUI-x64-5.4.0.sh && chmod u+x SoapUI-x64-5.4.0.sh && ./SoapUI-x64-5.4.0.sh -q && mv /home/vagrant/SmartBear/SoapUI-5.4.0/jre /home/vagrant/SmartBear/SoapUI-5.4.0/jre.disabled && echo 'SoapUI installed!'"
  
  # Install Docker
  config.vm.provision "docker"
  
  # Install Docker Compose; don't use the vagrant-docker-compose plugin, it installs an outdated docker-compose version
  config.vm.provision "docker-compose", privileged: false, type: "shell", inline: "echo 'installing Docker Compose...' && sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose && echo 'Docker Compose installed!'"

  # Install Docker Machine
  config.vm.provision "docker-machine", privileged: false, type: "shell", inline: "echo 'installing Docker Machine...' && base=https://github.com/docker/machine/releases/download/v0.14.0 && curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&  sudo install /tmp/docker-machine /usr/local/bin/docker-machine && echo 'Docker Machine installed!'"
  

  # Install AWS CLI
  config.vm.provision "awscli", privileged: false, type: "shell", inline: "cd /tmp && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && sudo python get-pip.py && pip install awscli --upgrade --user && export PATH=~/.local/bin:$PATH"
  
  #	Install links on desktop"
  config.vm.provision "shortcuts", privileged: false, type: "shell", inline: "ln -s /vagrant/ ~/Desktop/ && ln -s /opt/eclipse/ ~/Desktop/ && ln -s /opt/eclipse/eclipse-installer/eclipse-inst ~/Desktop/"
  
  config.vm.provision :reload 
  
  
  
end




